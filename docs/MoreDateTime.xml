<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>MoreDateTime</name>
  </assembly>
  <members>
    <member name="T:MoreDateTime.DateOnlyRange">
      <summary>
            Implements the <see cref="T:MoreDateTime.Interfaces.IRange`2" /> interface and provides a time range through its <see cref="P:MoreDateTime.DateOnlyRange.Start" /> and <see cref="P:MoreDateTime.DateOnlyRange.End" /> members
            </summary>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MoreDateTime.DateOnlyRange" /> class.
            </summary>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.#ctor(MoreDateTime.DateOnlyRange)">
      <summary>
            Initializes a copied new instance of the <see cref="T:MoreDateTime.DateOnlyRange" /> class.
            </summary>
      <param name="range">The range to copy</param>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.#ctor(MoreDateTime.DateTimeRange)">
      <summary>
            Initializes a copied new instance of the <see cref="T:MoreDateTime.DateTimeRange" /> class.
            </summary>
      <param name="range">The range to copy</param>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.#ctor(System.DateOnly,System.DateOnly)">
      <summary>
            Initializes a new instance of the <see cref="T:MoreDateTime.DateOnlyRange" /> class.
            </summary>
      <param name="startTime">The start DateOnly</param>
      <param name="endTime">The end DateOnly</param>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.#ctor(System.DateTime,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:MoreDateTime.DateOnlyRange" /> class.
            </summary>
      <param name="startTime">The start time.</param>
      <param name="endTime">The end time.</param>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.Contains(System.DateOnly)">
      <summary>
            Verifies if the given value is contained in this range, including start and end
            </summary>
      <param name="value">The value</param>
      <returns>True, if value is within this range</returns>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.Contains(System.DateTime)">
      <summary>
            Verifies if the given value is contained in this range, including start and end
            </summary>
      <param name="value">The value</param>
      <returns>True, if value is within this range</returns>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.Distance">
      <summary>
            Gets the distance between the <see cref="P:MoreDateTime.DateOnlyRange.Start" /> and the <see cref="P:MoreDateTime.DateOnlyRange.End" /></summary>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.Empty">
      <summary>
            Get an empty range
            </summary>
    </member>
    <member name="P:MoreDateTime.DateOnlyRange.End">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:MoreDateTime.DateOnlyRange.End</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.Extend(System.TimeSpan,MoreDateTime.Interfaces.RangeDirection)">
      <summary>
            Extends the <see cref="P:MoreDateTime.DateOnlyRange.Start" /> and/or <see cref="P:MoreDateTime.DateOnlyRange.End" /> by the specified <paramref name="timeSpan" /></summary>
      <param name="timeSpan">The time span.</param>
      <param name="direction">The direction in which to extend</param>
    </member>
    <member name="P:MoreDateTime.DateOnlyRange.IsEmpty">
      <summary>
            Verifies if the range is empty, Start == End == default(T)
            </summary>
      <returns>True, if both start and end are default(T)</returns>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.IsOrdered">
      <summary>
            Verifies that the order of the dates is correct, Start &lt; End
            </summary>
      <returns>True if Start is less or equal End</returns>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.IsWithin(MoreDateTime.DateOnlyRange)">
      <summary>
            Verifies if the this range is contained entirely in the given range, including start and end
            </summary>
      <param name="value">The value to compare with</param>
      <returns>True if this object is entirely within the target range</returns>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.Offset(System.TimeSpan)">
      <summary>
            Offsets the <see cref="P:MoreDateTime.DateOnlyRange.Start" /> and <see cref="P:MoreDateTime.DateOnlyRange.End" /> by the specified <paramref name="timeSpan" /></summary>
      <param name="timeSpan">The time span.</param>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.Order">
      <summary>
            Orders the range, so that Start is guaranteed to be less or equal End
            </summary>
      <returns>Itself ordered</returns>
    </member>
    <member name="M:MoreDateTime.DateOnlyRange.Reduce(System.TimeSpan,MoreDateTime.Interfaces.RangeDirection)">
      <summary>
            Reduces the <see cref="P:MoreDateTime.DateOnlyRange.Start" /> and/or <see cref="P:MoreDateTime.DateOnlyRange.End" /> by the specified <paramref name="timeSpan" /></summary>
      <param name="timeSpan">The time span.</param>
      <param name="direction">The direction in which to extend</param>
    </member>
    <member name="P:MoreDateTime.DateOnlyRange.Start">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:MoreDateTime.DateOnlyRange.Start</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:MoreDateTime.DateTimeProvider">
      <summary>
            A date and time provider, that can be used to simulate a certain date or time<br />
            When no mock date/time is set, it returns the datetime values from the system,
            otherwise the set value. The mock values does not change or reflect time passing.
            </summary>
    </member>
    <member name="M:MoreDateTime.DateTimeProvider.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:MoreDateTime.DateTimeProvider" /> class.
            </summary>
      <param name="nowIsUtc">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>nowIsUtc</parameter>
            <parameter>M:MoreDateTime.DateTimeProvider.#ctor(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:MoreDateTime.DateTimeProvider.Current">
      <summary>
            Gets the current DateTimeProvider 
            </summary>
    </member>
    <member name="P:MoreDateTime.DateTimeProvider.Now">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:MoreDateTime.DateTimeProvider.Now</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:MoreDateTime.DateTimeProvider.SetMockDateTime(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
            Sets the mock date time. This substitutes delivering the current date time from the system. Use for testing and verification.
            </summary>
      <param name="dtNow">The fixed DateTime for the Now property</param>
      <param name="dtUtc">The fixed DateTime for the UtcNow property, leave null to use dtNow value</param>
    </member>
    <member name="M:MoreDateTime.DateTimeProvider.SetUtcHandling(System.Boolean)">
      <summary>
            Sets how UTC is handled by the <see cref="P:MoreDateTime.DateTimeProvider.Now" /> property, if true then <see cref="P:MoreDateTime.DateTimeProvider.Now" /> is returning UTC time
            </summary>
      <param name="NowIsUtc">If true, <see cref="P:MoreDateTime.DateTimeProvider.Now" /> is UTC time</param>
    </member>
    <member name="P:MoreDateTime.DateTimeProvider.Today">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:MoreDateTime.DateTimeProvider.Today</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:MoreDateTime.DateTimeProvider.UtcNow">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:MoreDateTime.DateTimeProvider.UtcNow</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:MoreDateTime.DateTimeProvider.UtcToday">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:MoreDateTime.DateTimeProvider.UtcToday</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:MoreDateTime.DateTimeRange">
      <summary>
            Implements the <see cref="T:MoreDateTime.Interfaces.IRange`2" /> interface and provides a time range through its <see cref="P:MoreDateTime.DateTimeRange.Start" /> and <see cref="P:MoreDateTime.DateTimeRange.End" /> members
            </summary>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MoreDateTime.DateTimeRange" /> class.
            </summary>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.#ctor(MoreDateTime.DateTimeRange)">
      <summary>
            Initializes a copied new instance of the <see cref="T:MoreDateTime.DateTimeRange" /> class.
            </summary>
      <param name="range">The range to copy</param>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.#ctor(System.DateOnly,System.DateOnly)">
      <summary>
            Initializes a new instance of the <see cref="T:MoreDateTime.DateTimeRange" /> class.
            </summary>
      <param name="startDateOnly">The start datetime</param>
      <param name="endDateOnly">The end datetime</param>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:MoreDateTime.DateTimeRange" /> class.
            </summary>
      <param name="startDateTime">The start datetime</param>
      <param name="endDateTime">The end datetime</param>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.Contains(System.DateOnly)">
      <summary>
            Verifies if the given value is contained in this range, including start and end
            </summary>
      <param name="value">The value</param>
      <returns>True, if value is within this range</returns>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.Contains(System.DateTime)">
      <summary>
            Verifies if the given value is contained in this range, including start and end
            </summary>
      <param name="value">The value</param>
      <returns>True, if value is within this range</returns>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.Distance">
      <summary>
            Gets the distance between the <see cref="P:MoreDateTime.DateTimeRange.Start" /> and the <see cref="P:MoreDateTime.DateTimeRange.End" /></summary>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.Empty">
      <summary>
            Get an empty range
            </summary>
    </member>
    <member name="P:MoreDateTime.DateTimeRange.End">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:MoreDateTime.DateTimeRange.End</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.Extend(System.TimeSpan,MoreDateTime.Interfaces.RangeDirection)">
      <summary>
            Extends the <see cref="P:MoreDateTime.DateTimeRange.Start" /> and/or <see cref="P:MoreDateTime.DateTimeRange.End" /> by the specified <paramref name="timeSpan" /></summary>
      <param name="timeSpan">The time span.</param>
      <param name="direction">The direction in which to extend</param>
    </member>
    <member name="P:MoreDateTime.DateTimeRange.IsEmpty">
      <summary>
            Verifies if the range is empty, Start == End == default(T)
            </summary>
      <returns>True, if both start and end are default(T)</returns>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.IsOrdered">
      <summary>
            Verifies that the order of the dates is correct, Start &lt; End
            </summary>
      <returns>True if Start is less or equal End</returns>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.IsWithin(MoreDateTime.DateTimeRange)">
      <summary>
            Verifies if the this range is contained entirely in the given range, including start and end
            </summary>
      <param name="value">The value to compare with</param>
      <returns>True if this object is entirely within the target range</returns>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.Offset(System.TimeSpan)">
      <summary>
            Offsets the <see cref="P:MoreDateTime.DateTimeRange.Start" /> and <see cref="P:MoreDateTime.DateTimeRange.End" /> by the specified <paramref name="timeSpan" /></summary>
      <param name="timeSpan">The time span.</param>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.Order">
      <summary>
            Orders the range, so that Start is guaranteed to be less or equal End
            </summary>
      <returns>Itself ordered</returns>
    </member>
    <member name="M:MoreDateTime.DateTimeRange.Reduce(System.TimeSpan,MoreDateTime.Interfaces.RangeDirection)">
      <summary>
            Reduces the <see cref="P:MoreDateTime.DateTimeRange.Start" /> and/or <see cref="P:MoreDateTime.DateTimeRange.End" /> by the specified <paramref name="timeSpan" /></summary>
      <param name="timeSpan">The time span.</param>
      <param name="direction">The direction in which to extend</param>
    </member>
    <member name="P:MoreDateTime.DateTimeRange.Start">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:MoreDateTime.DateTimeRange.Start</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:MoreDateTime.DefaultHolidayProvider">
      <summary>
            The default holiday provider, has only 4 common holidays, 01 Jan, 01 May, 25 Dec and 26 Dec
            </summary>
    </member>
    <member name="M:MoreDateTime.DefaultHolidayProvider.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>MoreDateTime.DefaultHolidayProvider</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:MoreDateTime.DefaultHolidayProvider.IsPublicHoliday(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:MoreDateTime.DefaultHolidayProvider.IsPublicHoliday(System.DateOnly,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="date">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>date</parameter>
            <parameter>M:MoreDateTime.DefaultHolidayProvider.IsPublicHoliday(System.DateOnly,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="cultureInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cultureInfo</parameter>
            <parameter>M:MoreDateTime.DefaultHolidayProvider.IsPublicHoliday(System.DateOnly,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:MoreDateTime.DefaultHolidayProvider.IsPublicHoliday(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:MoreDateTime.DefaultHolidayProvider.IsPublicHoliday(System.DateTime,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="date">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>date</parameter>
            <parameter>M:MoreDateTime.DefaultHolidayProvider.IsPublicHoliday(System.DateTime,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="cultureInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cultureInfo</parameter>
            <parameter>M:MoreDateTime.DefaultHolidayProvider.IsPublicHoliday(System.DateTime,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:MoreDateTime.DefaultHolidayProvider.NumberOfKnownHolidays(System.Int32,System.Globalization.CultureInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:MoreDateTime.DefaultHolidayProvider.NumberOfKnownHolidays(System.Int32,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="year">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>year</parameter>
            <parameter>M:MoreDateTime.DefaultHolidayProvider.NumberOfKnownHolidays(System.Int32,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="cultureInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cultureInfo</parameter>
            <parameter>M:MoreDateTime.DefaultHolidayProvider.NumberOfKnownHolidays(System.Int32,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:MoreDateTime.NullHolidayProvider">
      <summary>
            The null holiday provider, provides no holidays at all
            </summary>
    </member>
    <member name="M:MoreDateTime.NullHolidayProvider.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>MoreDateTime.NullHolidayProvider</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:MoreDateTime.NullHolidayProvider.IsPublicHoliday(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:MoreDateTime.NullHolidayProvider.IsPublicHoliday(System.DateOnly,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="date">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>date</parameter>
            <parameter>M:MoreDateTime.NullHolidayProvider.IsPublicHoliday(System.DateOnly,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="cultureInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cultureInfo</parameter>
            <parameter>M:MoreDateTime.NullHolidayProvider.IsPublicHoliday(System.DateOnly,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:MoreDateTime.NullHolidayProvider.IsPublicHoliday(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:MoreDateTime.NullHolidayProvider.IsPublicHoliday(System.DateTime,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </summary>
      <param name="date">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>date</parameter>
            <parameter>M:MoreDateTime.NullHolidayProvider.IsPublicHoliday(System.DateTime,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
      <param name="cultureInfo">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>cultureInfo</parameter>
            <parameter>M:MoreDateTime.NullHolidayProvider.IsPublicHoliday(System.DateTime,System.Globalization.CultureInfo)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:MoreDateTime.TimeOnlyRange">
      <summary>
            Implements the <see cref="T:MoreDateTime.Interfaces.IRange`2" /> interface and provides a time range through its <see cref="P:MoreDateTime.TimeOnlyRange.Start" /> and <see cref="P:MoreDateTime.TimeOnlyRange.End" /> members
            </summary>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:MoreDateTime.TimeOnlyRange" /> class.
            </summary>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.#ctor(MoreDateTime.TimeOnlyRange)">
      <summary>
            Initializes a copied new instance of the <see cref="T:MoreDateTime.TimeOnlyRange" /> class.
            </summary>
      <param name="range">The range to copy</param>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.#ctor(System.TimeOnly,System.TimeOnly)">
      <summary>
            Initializes a new instance of the <see cref="T:MoreDateTime.TimeOnlyRange" /> class.
            </summary>
      <param name="startTime">The start TimeOnly</param>
      <param name="endTime">The end TimeOnly</param>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.Contains(System.TimeOnly)">
      <summary>
            Verifies if the given value is contained in this range, including start and end
            </summary>
      <param name="value">The value</param>
      <returns>True, if value is within this range</returns>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.Distance">
      <summary>
            Gets the distance between the <see cref="P:MoreDateTime.TimeOnlyRange.Start" /> and the <see cref="P:MoreDateTime.TimeOnlyRange.End" /></summary>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.Empty">
      <summary>
            Get an empty range
            </summary>
    </member>
    <member name="P:MoreDateTime.TimeOnlyRange.End">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:MoreDateTime.TimeOnlyRange.End</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.Extend(System.TimeSpan,MoreDateTime.Interfaces.RangeDirection)">
      <summary>
            Extends the <see cref="P:MoreDateTime.TimeOnlyRange.Start" /> and/or <see cref="P:MoreDateTime.TimeOnlyRange.End" /> by the specified <paramref name="timeSpan" /></summary>
      <param name="timeSpan">The time span.</param>
      <param name="direction">The direction in which to extend</param>
    </member>
    <member name="P:MoreDateTime.TimeOnlyRange.IsEmpty">
      <summary>
            Verifies if the range is empty, Start == End == default(T)
            </summary>
      <returns>True, if both start and end are default(T)</returns>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.IsOrdered">
      <summary>
            Verifies if start is less or equal end
            </summary>
      <returns>True if start is less or equal end</returns>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.IsWithin(MoreDateTime.TimeOnlyRange)">
      <summary>
            Verifies if the this range is contained entirely in the given range, including start and end
            </summary>
      <param name="value">The value to compare with</param>
      <returns>True if this object is entirely within the target range</returns>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.Offset(System.TimeSpan)">
      <summary>
            Offsets the <see cref="P:MoreDateTime.TimeOnlyRange.Start" /> and <see cref="P:MoreDateTime.TimeOnlyRange.End" /> by the specified <paramref name="timeSpan" /></summary>
      <param name="timeSpan">The time span.</param>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.Order">
      <summary>
            Orders the range, so that Start is guaranteed to be less or equal End.
            <note>Does not make much sense for TimeOnlyRange since the time can be spanning 00:00, as in 22:00 - 04:00</note></summary>
      <returns>Itself ordered</returns>
    </member>
    <member name="M:MoreDateTime.TimeOnlyRange.Reduce(System.TimeSpan,MoreDateTime.Interfaces.RangeDirection)">
      <summary>
            Reduces the <see cref="P:MoreDateTime.TimeOnlyRange.Start" /> and/or <see cref="P:MoreDateTime.TimeOnlyRange.End" /> by the specified <paramref name="timeSpan" /></summary>
      <param name="timeSpan">The time span.</param>
      <param name="direction">The direction in which to extend</param>
    </member>
    <member name="P:MoreDateTime.TimeOnlyRange.Start">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:MoreDateTime.TimeOnlyRange.Start</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:MoreDateTime.Extensions.DateOnlyExtensions">
      <summary>
            The extension methods for working with <see cref="T:System.DateOnly" /> objects.
            </summary>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.Add(System.DateOnly,System.TimeSpan)">
      <summary>
            Adds a timespan to a DateOnly object. If the timespan is less than a whole day, the same value is returned
            </summary>
      <param name="me">The DateOnly object</param>
      <param name="timeSpan">The time span to add</param>
      <returns>A DateOnly object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="timeSpan" /></returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.AddHours(System.DateOnly,System.Double)">
      <summary>
            Adds hours to a DateOnly object. If the value is less than 24 hours (a whole day), the same Date is returned
            </summary>
      <param name="me">The DateOnly object</param>
      <param name="value">The number of hours to add</param>
      <returns>A DateOnly object whose value is the sum of the date and time represented by this instance and the number of hours in value</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.AddMilliseconds(System.DateOnly,System.Double)">
      <summary>
            Adds minutes to a DateOnly object. If the values is less than a 86_400_000 seconds (a whole day), the same value is returned
            </summary>
      <param name="me">The DateOnly object</param>
      <param name="value">The time span to add</param>
      <returns>A DateOnly object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" /></returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.AddMinutes(System.DateOnly,System.Double)">
      <summary>
            Adds minutes to a DateOnly object. If the values is less than a 1440 minutes (a whole day), the same value is returned
            </summary>
      <param name="me">The DateOnly object</param>
      <param name="value">The number of minutes to add</param>
      <returns>A DateOnly object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" /></returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.AddSeconds(System.DateOnly,System.Double)">
      <summary>
            Adds minutes to a DateOnly object. If the values is less than a 86_400 seconds (a whole day), the same value is returned
            </summary>
      <param name="me">The DateOnly object</param>
      <param name="value">The time span to add</param>
      <returns>A DateOnly object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" /></returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.AddTicks(System.DateOnly,System.Int64)">
      <summary>
            Adds a number of ticks to a DateOnly object. If the number of ticks is less than a whole day, the same value is returned
            </summary>
      <param name="me">The DateOnly object</param>
      <param name="ticks">The number of ticks to add</param>
      <returns>A DateOnly object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="ticks" /></returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.AddWeeks(System.DateOnly,System.Double)">
      <summary>
            Adds weeks to a DateOnly object
            </summary>
      <param name="me">The DateOnly object</param>
      <param name="value">The number of weeks to add</param>
      <returns>A DateOnly object whose value is the sum of the date and time represented by this instance and the number of weeks</returns>
    </member>
    <member name="F:MoreDateTime.Extensions.DateOnlyExtensions.DaysInWeek">
      <summary>You'd never guess it, its the number of days in a week</summary>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.Difference(MoreDateTime.DateOnlyRange,MoreDateTime.DateOnlyRange)">
      <summary>
            Calculates the difference of two DateOnlyRanges. If the two ranges do not overlap, the result is 
            the first DateOnlyRange. Otherwise, the result is the first DateOnlyRange without where both ranges overlap.
            </summary>
      <param name="a">The first range</param>
      <param name="b">The second range</param>
      <returns>A list of DateOnlyRange</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.Distance(System.DateOnly,System.DateOnly)">
      <summary>
            Returns the distance as a TimeSpan between two DateOnly objects. The result is always positive
            </summary>
      <param name="startDate">The startDate object</param>
      <param name="endDate">The endDate object</param>
      <returns>A TimeSpan which expresses the difference between the two dates</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.DoesOverlap(MoreDateTime.DateOnlyRange,MoreDateTime.DateOnlyRange)">
      <summary>
            Verifies if DateOnlyRange a overlapps with DateOnlyRange b.
            </summary>
      <param name="a">The DateOnlyRange to verify a possible overlap</param>
      <param name="b">The DateOnlyrange to verify with</param>
      <returns>A bool.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.EndOfMonth(System.DateOnly)">
      <summary>
            Returns a DateTime object representing the last day of the current month
            </summary>
      <param name="me">The DateTime value of which the last day is requested</param>
      <returns>A DateTime object with the last day of the month, time members set to 0 (00:00:00)</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.EndOfWeek(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Returns a DateTime object representing the last day of the current Week
            </summary>
      <param name="me">The DateTime value of which the first day is requested</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>A DateTime object with the last day of the Week, time members set to 0 (00:00:00)</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.EnumerateDaysUntil(System.DateOnly,System.DateOnly)">
      <summary>
            Enumerates all days startDate current DateOnly value endDate the end DateOnly, including the end date
            </summary>
      <param name="from">The starting DateOnly value</param>
      <param name="to">The ending DateOnly value</param>
      <returns>A enumerable of DateOnly values with days increasing by 1</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.EnumerateHolidaysUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Enumerates all holidays startDate current DateOnly value endDate the end DateOnly, including the end date
            </summary>
      <param name="from">The starting DateOnly value</param>
      <param name="to">The ending DateOnly value</param>
      <param name="cultureInfo">The CultureInfo for the source timezone, can be null for current</param>
      <returns>A enumerable of DateOnly values with days stepping startDate holiday endDate next holiday</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.EnumerateInStepsUntil(System.DateOnly,System.DateOnly,System.TimeSpan)">
      <summary>
            Enumerates starting with the startDate date, until the endDate date in steps of distance<br />
            When the distance is negative, the start date must be greater than the end date, and the enumeration goes backwards
            </summary>
      <param name="startDate">The starting DateOnly object</param>
      <param name="endDate">The ending DateOnly object</param>
      <param name="distance">The distance expressed as TimeSpan</param>
      <returns>An IEnumerable of type DateOnly</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.EnumerateInStepsUntil(System.DateOnly,System.DateOnly,System.TimeSpan,System.Func{System.DateOnly,System.Boolean})">
      <summary>
            Enumerates starting with startDate until endDate in steps of distance
            </summary>
      <param name="startDate">The starting DateOnly object</param>
      <param name="endDate">The ending DateOnly object</param>
      <param name="distance">The distance expressed as TimeSpan</param>
      <param name="evaluator">An evaluation function called for each step before returning it. If the evaluator returns false, the value is skipped</param>
      <returns>An IEnumerable of type DateOnly</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.EnumerateMonthsUntil(System.DateOnly,System.DateOnly)">
      <summary>
            Enumerates all months startDate current DateOnly value endDate the end DateOnly, including the end date
            </summary>
      <param name="from">The starting DateOnly value</param>
      <param name="to">The ending DateOnly value</param>
      <returns>A enumerable of DateOnly values with months increasing by 1</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.EnumerateWeekendsUntil(System.DateOnly,System.DateOnly)">
      <summary>
            Advances to the closest weekend and enumerates the weekends until the end date. The weekend date is always a saturday when going forward and a sunday when going backwards.
            </summary>
      <param name="from">The starting DateOnly value</param>
      <param name="to">The ending DateOnly value</param>
      <returns>A enumerable of DateOnly values</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.EnumerateWorkdaysUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Enumerates all working days startDate current DateOnly value endDate the end DateOnly, including the end date
            </summary>
      <param name="from">The starting DateOnly value</param>
      <param name="to">The ending DateOnly value</param>
      <param name="cultureInfo">The CultureInfo for the source timezone, can be null for current</param>
      <returns>A enumerable of DateOnly values with days increasing by 1</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.EnumerateYearsUntil(System.DateOnly,System.DateOnly)">
      <summary>
            Enumerates all years startDate current DateOnly value endDate the end DateOnly, including the end date
            </summary>
      <param name="from">The starting DateOnly value</param>
      <param name="to">The ending DateOnly value</param>
      <returns>A enumerable of DateOnly values with years increasing by 1</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.FirstFridayOfMonth(System.DateOnly)">
      <summary>
            Returns the first Friday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the First Friday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.FirstMondayOfMonth(System.DateOnly)">
      <summary>
            Returns the first Monday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the First Monday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.FirstSaturdayOfMonth(System.DateOnly)">
      <summary>
            Returns the first Saturday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the First Saturday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.FirstSundayOfMonth(System.DateOnly)">
      <summary>
            Returns the first Sunday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the First Sunday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.FirstThursdayOfMonth(System.DateOnly)">
      <summary>
            Returns the first Thursday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the First Thursday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.FirstTuesdayOfMonth(System.DateOnly)">
      <summary>
            Returns the first MoTuesday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the First Tuesday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.FirstWednesdayOfMonth(System.DateOnly)">
      <summary>
            Returns the first Wednesday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the First Wednesday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.FirstWeekdayOfMonth(System.DateOnly,System.DayOfWeek)">
      <summary>
            Returns the first given weekday in the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <param name="dayOfweek">The <see cref="T:System.DayOfWeek" /> to find</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the last given weekday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.Intersection(MoreDateTime.DateOnlyRange,MoreDateTime.DateOnlyRange)">
      <summary>
            Calculates the intersection of two DateOnlyRanges. If the two ranges do not overlap, the result is 
            an empty DateOnlyRange. Otherwise, the result is the DateOnlyRange that where both ranges overlap.
            </summary>
      <param name="a">The first range</param>
      <param name="b">The second range</param>
      <returns>A DateOnlyRange which is either empty, when there is no overlap, or contains the range where both ranges overlap</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsBetween(System.DateOnly,System.DateOnly,System.DateOnly)">
      <summary>
            Checks if the given value is between the given startDate and endDate values, excluding the start and end value
            </summary>
      <param name="me">The DateOnly to compare</param>
      <param name="startDate">The startDate date</param>
      <param name="endDate">The endDate date</param>
      <returns>True if the value is greater or equal startDate and less than or equal endDate</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsEqual(System.DateOnly,System.DateOnly,MoreDateTime.Extensions.DateTimeExtensions.DateTruncate,System.Globalization.CultureInfo)">
      <summary>
            Compares two dates for equality down to the given precision
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <param name="truncateTo">The precision to truncate to</param>
      <param name="cultureInfo">The CulturInfo to use for calendar calculation, can be null for current culture</param>
      <returns>A bool.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsEqualDownToDay(System.DateOnly,System.DateOnly)">
      <summary>
            Compares two dates for equality down to the year (hours, minutes, seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsEqualDownToMonth(System.DateOnly,System.DateOnly)">
      <summary>
            Compares two dates for equality down to the year (days, hours, minutes, seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsEqualDownToWeek(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Compares two dates for equality down to the week (hours, minutes, seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <param name="cultureInfo">The CulturInfo to use for week calculation, can be null for current culture</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsEqualDownToYear(System.DateOnly,System.DateOnly)">
      <summary>
            Compares two dates for equality down to the year (months, days, hours, minutes, seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <returns>True if the dates are equal down to the year</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsPublicHoliday(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Checks if the given date falls on a Saturday or Sunday
            </summary>
      <param name="me">The DateOnly object to check</param>
      <param name="cultureInfo">The CultureInfo for which the holidays will be considered. If null, the current culture is used.</param>
      <returns>True if the given date is Saturday or Sunday</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsSameDay(System.DateOnly,System.DateOnly)">
      <summary>
            Verifies if the two dates are the same day of the month
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <returns>True if the dates are on the same day</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsSameDay(System.DateOnly,System.DateTime)">
      <summary>
            Verifies if the two dates are the same day of the month
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <returns>True if the dates are on the same day</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsSameMonth(System.DateOnly,System.DateOnly)">
      <summary>
            Verifies if the two dates are the same month
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <returns>True if the dates are on the same month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsSameMonth(System.DateOnly,System.DateTime)">
      <summary>
            Verifies if the two dates are the same month
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <returns>True if the dates are on the same month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsSameWeek(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Verifies if the two dates are the same week
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <param name="cultureInfo">The CulturInfo to use for calendar calculation, can be null for current culture</param>
      <returns>True if the dates are on the same week</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsSameWeek(System.DateOnly,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Verifies if the two dates are the same week
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <param name="cultureInfo">The CulturInfo to use for calendar calculation, can be null for current culture</param>
      <returns>True if the dates are on the same week</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsSameWeekday(System.DateOnly,System.DateOnly)">
      <summary>
            Verifies if the two dates are the same weekday
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <returns>True if the dates are on the same weekday</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsSameWeekday(System.DateOnly,System.DateTime)">
      <summary>
            Verifies if the two dates are the same weekday
            </summary>
      <param name="dt">The first DateOnly argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <returns>True if the dates are on the same weekday</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsSameYear(System.DateOnly,System.DateOnly)">
      <summary>
            Verifies if the two dates are the same year
            </summary>
      <param name="dt">The first <see cref="T:System.DateOnly" /> argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <returns>True if the dates are on the same year</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsSameYear(System.DateOnly,System.DateTime)">
      <summary>
            Verifies if the two dates are the same year
            </summary>
      <param name="dt">The first <see cref="T:System.DateOnly" /> argument</param>
      <param name="other">The DateOnly argument to compare with</param>
      <returns>True if the dates are on the same year</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsWeekend(System.DateOnly)">
      <summary>
            Checks if the given date falls on a Saturday or Sunday
            </summary>
      <param name="me">The DateOnly object to check</param>
      <returns>True if the given date is Saturday or Sunday</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsWithin(System.DateOnly,MoreDateTime.DateOnlyRange)">
      <summary>
            Checks if the given value is between the given start and end values, including start date and end date
            </summary>
      <param name="me">The DateTime to compare</param>
      <param name="range">The date range to check</param>
      <returns>True if the value is greater or equal range.Start and less than or equal range.End</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsWithin(System.DateOnly,System.DateOnly,System.DateOnly)">
      <summary>
            Checks if the given value is within the given startDate and endDate values, including startDate and endDate
            </summary>
      <param name="me">The DateTime to compare</param>
      <param name="startDate">The startDate date</param>
      <param name="endDate">The endDate date</param>
      <returns>True if the value is greater or equal startDate and less than or equal endDate</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.IsWithin(System.DateOnly,System.DateTime,System.DateTime)">
      <summary>
            Checks if the given value is within the given startDate and endDate values, including startDate and endDate
            </summary>
      <param name="me">The DateTime to compare</param>
      <param name="startDate">The startDate date</param>
      <param name="endDate">The endDate date</param>
      <returns>True if the value is greater or equal startDate and less than or equal endDate</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.LastFridayOfMonth(System.DateOnly)">
      <summary>
            Returns the last Friday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the last Friday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.LastMondayOfMonth(System.DateOnly)">
      <summary>
            Returns the last Monday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the last Monday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.LastSaturdayOfMonth(System.DateOnly)">
      <summary>
            Returns the last Saturday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the last Saturday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.LastSundayOfMonth(System.DateOnly)">
      <summary>
            Returns the last Sunday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the last Sunday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.LastThursdayOfMonth(System.DateOnly)">
      <summary>
            Returns the last Thursday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the last Thursday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.LastTuesdayOfMonth(System.DateOnly)">
      <summary>
            Returns the last Tuesday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the last Tuesday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.LastWednesdayOfMonth(System.DateOnly)">
      <summary>
            Returns the last Wednesday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the last Wednesday ofthis month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.LastWeekdayOfMonth(System.DateOnly,System.DayOfWeek)">
      <summary>
            Returns the last given weekday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <param name="dayOfweek">The <see cref="T:System.DayOfWeek" /> to find</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the last given weekday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NextDay(System.DateOnly)">
      <summary>
            Gets the DateOnly value of the next day
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>A DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NextHoliday(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Gets the DateOnly value of the next holiday<br />
            Holidays are calculated through the IHolidayProvider interface in DateTimeExtensions.
            </summary>
      <param name="dt">The DateOnly object</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>A DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NextMonth(System.DateOnly)">
      <summary>
            Gets the DateOnly value of the next month, first day
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>A DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NextWeek(System.DateOnly)">
      <summary>
            Gets the DateOnly value of the same day in the next week
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>A DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NextWeekend(System.DateOnly)">
      <summary>
            Gets the DateOnly value of the next weekend following this date. If the given date is already a weekend, the next weekend is returned.
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>A DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NextWorkday(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Gets the DateOnly value of the same day in the next week
            </summary>
      <param name="dt">The DateOnly object</param>
      <param name="cultureInfo">The CulturInfo to use for calendar calculation, can be null for current culture</param>
      <returns>A DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NextYear(System.DateOnly)">
      <summary>
            Gets the DateOnly value of the next year, first month, first day
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>A DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfDaysUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Days between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Days between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfDecadesUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Decades between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Decades between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfHolidaysUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Holidays between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdayss and holidays, can be null to use current</param>
      <returns>The number of Holidays between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfHoursUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Hours between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdayss and holidays, can be null to use current</param>
      <returns>The number of Hours between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfMillisecondsUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Milliseconds between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdayss and holidays, can be null to use current</param>
      <returns>The number of Milliseconds between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfMinutesUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Minutes between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdayss and holidays, can be null to use current</param>
      <returns>The number of Minutes between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfMonthsUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Months between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Months between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfSecondsUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Seconds between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdayss and holidays, can be null to use current</param>
      <returns>The number of Seconds between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfSemestersUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Semesters between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Semesters between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfTrimestersUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Trimesters between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Semesters between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfWeekendsUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Weekends between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Weekends between startDate and endDate as a double without fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfWeeksUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Weeks between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Weeks between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfWorkdaysUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Workdays between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workWorkdays and holiWorkdays, can be null to use current</param>
      <returns>The number of Workdays between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.NumberOfYearsUntil(System.DateOnly,System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Count the number of years between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of years between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.PreviousDay(System.DateOnly)">
      <summary>
            Gets the DateOnly value of the day before
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>A DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.PreviousHoliday(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Gets the DateOnly value of the previous holiday<br />
            If you have a license for the Nager nuget package, this method will calculate the holidays based on the calendar in cultureInfo,
            otherwise it will simply skip weekends.
            </summary>
      <param name="dt">The DateOnly object</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>A DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.PreviousMonth(System.DateOnly)">
      <summary>
            Gets the DateOnly value of the month before
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>A DateOnly object whose value is the month before the given, the day and time is not changed</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.PreviousWeek(System.DateOnly)">
      <summary>
            Gets the DateOnly value of the week before
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>A DateOnly object whose value is the week before the given, the weekday and time is not changed</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.PreviousWeekend(System.DateOnly)">
      <summary>
            Gets the DateOnly value of the weekend before this date. If the given date is already a weekend, the previous weekend is returned.
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>A DateOnly object whose value is the week before the given, the weekday and time is not changed</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.PreviousWorkday(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Gets the DateOnly value of the previous working day
            </summary>
      <param name="dt">The DateOnly object</param>
      <param name="cultureInfo">The CulturInfo to use for calendar calculation, can be null for current culture</param>
      <returns>A DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.PreviousYear(System.DateOnly)">
      <summary>
            Gets the DateOnly value of the next year, first month, first day, time members are all zeroed (00:00:00)
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>A DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.Split(MoreDateTime.DateOnlyRange,System.Int32)">
      <summary>
            Splits the given range of DateOnly into the given number of parts.
            </summary>
      <param name="dates">The start and end date</param>
      <param name="parts">The number of parts to split into</param>
      <returns>A list of DateOnlyRanges</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.Split(System.DateOnly,System.DateOnly,System.Int32)">
      <summary>
            Splits the given range of DateOnly into the given number of parts.
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="parts">The number of parts to split into</param>
      <returns>A list of DateOnlyRanges</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.Split(System.DateOnly,System.TimeSpan,System.Int32)">
      <summary>
            Splits the given range of DateOnly into the given number of parts.
            </summary>
      <param name="startDate">The start date</param>
      <param name="distance">The timespan to split</param>
      <param name="parts">The number of parts to split into</param>
      <returns>A list of DateOnlyRanges</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.StartOfMonth(System.DateOnly)">
      <summary>
            Returns a DateTime object representing the first day of the current month
            </summary>
      <param name="me">The DateTime value of which the first day is requested</param>
      <returns>A DateTime object with day 1, time members set to 0 (00:00:00)</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.StartOfWeek(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Returns a DateTime object representing the first weekday of the given Week
            </summary>
      <param name="me">The DateTime value of which the first day is requested</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>A DateTime object with first day of the week</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.Sub(System.DateOnly,System.TimeSpan)">
      <summary>
            Returns a new DateOnly that subtracts the value of the specified TimeSpan from the value of this instance
            </summary>
      <param name="me">The DateOnly object to subtract the value from</param>
      <param name="timeSpan">A positive time interval</param>
      <returns>An object whose value is the sum of the date and time represented by this instance minus the time interval represented by value</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.ToDateOnly(System.DateTime)">
      <summary>
            Returns the <see cref="T:System.DateTime" /> as <see cref="T:System.DateOnly" /></summary>
      <param name="me">The <see cref="T:System.DateTime" /> object</param>
      <returns>A <see cref="T:System.DateOnly" /> object representing the .Date part of the given DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.ToDateTime(System.DateOnly,System.DateTimeKind)">
      <summary>
            Returns a <see cref="T:System.DateTime" /> object with the time component set to 0 (00:00:00)
            </summary>
      <param name="me">The DateOnly object to convert</param>
      <param name="kind">The kind of DateTime object to create</param>
      <returns>A <see cref="T:System.DateTime" /> instance composed of the current <see cref="T:System.DateOnly" /> instance and time set to 0 (00:00:00)</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.ToSqlString(System.DateOnly)">
      <summary>
            Converts a DateTime value to an SQL appropriate format (yyyy-MM-dd), independent of the current locale
            </summary>
      <param name="me">The DateTime value to convert</param>
      <returns>A DateTime string in SQL format </returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.ToTimeOnly(System.DateTime)">
      <summary>
            Returns the <see cref="T:System.DateTime" /> as <see cref="T:System.TimeOnly" />, stripping the date component
            </summary>
      <param name="me">The <see cref="T:System.DateTime" /> object</param>
      <returns>A <see cref="T:System.TimeOnly" /> object representing the Time part of the given DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.TruncateTo(System.DateOnly,MoreDateTime.Extensions.DateTimeExtensions.DateTruncate,System.Globalization.CultureInfo)">
      <summary>
            Truncates the precision of a DateTime object to the given precision
            </summary>
      <param name="dt">The DateTime object</param>
      <param name="TruncateTo">The precision to truncate to</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null to use current culture</param>
      <returns>The Truncated dateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.TruncateToMonth(System.DateOnly)">
      <summary>
            Truncates the precision of a DateOnly object to the month, day 1
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>The Truncated DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.TruncateToWeek(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Truncates the precision of a DateOnly object to the week of the object, day is first day of week
            </summary>
      <param name="dt">The DateOnly object</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null to use current culture</param>
      <returns>The Truncated DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.TruncateToYear(System.DateOnly)">
      <summary>
            Truncates the precision of a DateOnly object to the year, day 1, month 1
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>The Truncated DateOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.Union(MoreDateTime.DateOnlyRange,MoreDateTime.DateOnlyRange)">
      <summary>
            Calculates the union of two DateOnlyRanges. If the two ranges do not overlap, the result is 
            an empty DateOnlyRange. Otherwise, the result is the DateOnlyRange that contains both ranges.
            </summary>
      <param name="a">The first range</param>
      <param name="b">The second range</param>
      <returns>A DateOnlyRange which is either empty, when there is no overlap, or contains the range spanning both ranges</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.Weeknumber(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Tests if the time in the given DateTime object is midday (12:00:00.000)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>True if time is 00:00:00.000</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateOnlyExtensions.WeekOfYear(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Returns the Week of the Year of this <see cref="T:System.DateOnly" /> object
            </summary>
      <param name="me">The DateOnly object</param>
      <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo" /> for the calendar, if null (or not provided) the current culture is used</param>
      <returns>An integer </returns>
    </member>
    <member name="T:MoreDateTime.Extensions.DateTimeExtensions">
      <summary>
            DateTime related extension methods
            </summary>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.AddWeeks(System.DateTime,System.Double)">
      <summary>
            Adds weeks to a DateTime object
            </summary>
      <param name="me">The DateTime object</param>
      <param name="value">The number of weeks to add</param>
      <returns>A DateTime object whose value is the sum of the date and time represented by this instance and the number of weeks</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.AsUtcDate(System.DateTime,System.Globalization.CultureInfo,System.TimeZoneInfo)">
      <summary>
            Returns the DateTime object as UTC DateTime with all time members set to 0 (00:00:00)
            </summary>
      <param name="time">The time.</param>
      <param name="cultureInfo">The CultureInfo for the source calendar, can be null for current</param>
      <param name="timeZoneInfo">The source timezone, can be null for current</param>
      <returns>A DateTime.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.AsUtcTime(System.DateTime,System.Globalization.CultureInfo,System.TimeZoneInfo)">
      <summary>
            Returns the DateTime object as UTC DateTime 
            </summary>
      <param name="time">The time.</param>
      <param name="cultureInfo">The CultureInfo for the source calendar, can be null for current</param>
      <param name="timeZoneInfo">The source timezone, can be null for current</param>
      <returns>A DateTime.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.Difference(MoreDateTime.DateTimeRange,MoreDateTime.DateTimeRange)">
      <summary>
            Calculates the difference of two DateTimeRanges. If the two ranges do not overlap, the result is 
            the first DateTimeRange. Otherwise, the result is the first DateTimeRange without where both ranges overlap.
            </summary>
      <param name="a">The first range</param>
      <param name="b">The second range</param>
      <returns>A list of DateTimeRange</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.Distance(System.DateTime,System.DateTime)">
      <summary>
            Returns the distance as a TimeSpan between two DateTime objects. The result is always a positive value.
            </summary>
      <param name="startDate">The startDate object</param>
      <param name="endDate">The endDate object</param>
      <returns>A TimeSpan which expresses the difference between the two dates</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.DoesOverlap(MoreDateTime.DateTimeRange,MoreDateTime.DateTimeRange)">
      <summary>
            Verifies if DateTimeRange a overlapps with DateTimeRange b.
            </summary>
      <param name="a">The DateTimeRange to verify a possible overlap</param>
      <param name="b">The DateTimerange to verify with</param>
      <returns>A bool.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.EndOfMonth(System.DateTime)">
      <summary>
            Returns a DateTime object representing the first year of the current year
            </summary>
      <param name="dateTime">The DateTime value of which the first year is requested</param>
      <returns>A DateTime object with the last year of the year, time members set to 0 (00:00:00)</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.EndOfWeek(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Returns a DateTime object representing the last day of the current Week
            </summary>
      <param name="me">The DateTime value of which the first day is requested</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>A DateTime object with the last day of the Week, time members set to 0 (00:00:00)</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.EnumerateDaysUntil(System.DateTime,System.DateTime)">
      <summary>
            Enumerates all days startDate current DateTime value endDate the end DateTime, including the end date
            </summary>
      <param name="from">The starting DateTime value</param>
      <param name="to">The ending DateTime value</param>
      <returns>A enumerable of DateTime values with days increasing by 1</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.EnumerateHolidaysUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Enumerates all holidays startDate current DateTime value endDate the end DateTime, including the end date
            </summary>
      <param name="from">The starting DateTime value</param>
      <param name="to">The ending DateTime value</param>
      <param name="cultureInfo">The CultureInfo for the source timezone, can be null for current</param>
      <returns>A enumerable of DateTime values with days stepping startDate holiday endDate next holiday</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.EnumerateInStepsUntil(System.DateTime,System.DateTime,System.TimeSpan)">
      <summary>
            Enumerates starting with the startDate date, until the endDate date in steps of distance<br />
            When the distance is negative, the start date must be greater than the end date, and the enumeration goes backwards
            </summary>
      <param name="startDate">The starting DateTime object</param>
      <param name="endDate">The ending DateTime object</param>
      <param name="distance">The distance expressed as TimeSpan</param>
      <returns>An IEnumerable of type DateTime</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.EnumerateInStepsUntil(System.DateTime,System.DateTime,System.TimeSpan,System.Func{System.DateTime,System.Boolean})">
      <summary>
            Enumerates starting with startDate until endDate in steps of distance
            </summary>
      <param name="startDate">The starting DateTime object</param>
      <param name="endDate">The ending DateTime object</param>
      <param name="distance">The distance expressed as TimeSpan</param>
      <param name="evaluator">An evaluation function called for each step before returning it. If the evaluator returns false, the value is skipped</param>
      <returns>An IEnumerable of type DateTime</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.EnumerateMonthsUntil(System.DateTime,System.DateTime)">
      <summary>
            Enumerates all months startDate current DateTime value endDate the end DateTime, including the end date
            </summary>
      <param name="from">The starting DateTime value</param>
      <param name="to">The ending DateTime value</param>
      <returns>A enumerable of DateTime values with months increasing by 1</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.EnumerateWeekendsUntil(System.DateTime,System.DateTime)">
      <summary>
            Advances to the closest weekend and enumerates the weekends until the end date
            </summary>
      <param name="from">The starting DateTime value</param>
      <param name="to">The ending DateTime value</param>
      <returns>A enumerable of DateTime values</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.EnumerateWorkdaysUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Enumerates all working days startDate current DateTime value endDate the end DateTime, including the end date
            </summary>
      <param name="from">The starting DateTime value</param>
      <param name="to">The ending DateTime value</param>
      <param name="cultureInfo">The CultureInfo for the source timezone, can be null for current</param>
      <returns>A enumerable of DateTime values with days increasing by 1</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.EnumerateYearsUntil(System.DateTime,System.DateTime)">
      <summary>
            Enumerates all years startDate current DateTime value endDate the end DateTime, including the end date
            </summary>
      <param name="from">The starting DateTime value</param>
      <param name="to">The ending DateTime value</param>
      <returns>A enumerable of DateTime values with years increasing by 1</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.FirstFridayOfMonth(System.DateTime)">
      <summary>
            Returns the first Friday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the first Friday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.FirstMondayOfMonth(System.DateTime)">
      <summary>
            Returns the first monday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the first monday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.FirstSaturdayOfMonth(System.DateTime)">
      <summary>
            Returns the first Saturday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the first Saturday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.FirstSundayOfMonth(System.DateTime)">
      <summary>
            Returns the first Sunday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the first Sunday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.FirstThursdayOfMonth(System.DateTime)">
      <summary>
            Returns the first Thursday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the first Thursday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.FirstTuesdayOfMonth(System.DateTime)">
      <summary>
            Returns the first Tuesday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the first Tuesday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.FirstWednesdayOfMonth(System.DateTime)">
      <summary>
            Returns the first Wednesday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the first Wednesday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.FirstWeekdayOfMonth(System.DateTime,System.DayOfWeek)">
      <summary>
            Returns the first given weekday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <param name="dayOfweek">The <see cref="T:System.DayOfWeek" /> to find</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the first given weekday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.Intersection(MoreDateTime.DateTimeRange,MoreDateTime.DateTimeRange)">
      <summary>
            Calculates the intersection of two DateTimeRanges. If the two ranges do not overlap, the result is 
            an empty DateTimeRange. Otherwise, the result is the DateTimeRange that where both ranges overlap.
            </summary>
      <param name="a">The first range</param>
      <param name="b">The second range</param>
      <returns>A DateTimeRange which is either empty, when there is no overlap, or contains the range where both ranges overlap</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsAfternoon(System.DateTime)">
      <summary>
            Tests if the time in the given DateTime object is considered afternoon (12:00:00.000 - 18:00:00.000)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <returns>True if time is between 12:00:00.000 and 18:00:00.000</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
      <summary>
            Checks if the given value is between the given startDate and endDate values, excluding startDate and endDate
            </summary>
      <param name="me">The DateTime to compare</param>
      <param name="startDate">The startDate date</param>
      <param name="endDate">The endDate date</param>
      <returns>True if the value is greater or equal startDate and less than or equal endDate</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsBetween(System.Int32,System.Int32,System.Int32)">
      <summary>
            Checks if the given value is between the given start and end values, excluding start and end
            </summary>
      <param name="me">The integer to compare</param>
      <param name="start">The start</param>
      <param name="end">The end</param>
      <returns>True if the value is greater or equal start and less than or equal end</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsEqual(System.DateTime,System.DateTime,MoreDateTime.Extensions.DateTimeExtensions.DateTruncate,System.Globalization.CultureInfo)">
      <summary>
            Compares two dates for equality down to the given precision
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <param name="truncateTo">The precision to truncate to</param>
      <param name="cultureInfo">The CulturInfo to use for calendar calculation, can be null for current culture</param>
      <returns>A bool.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsEqualDownToDay(System.DateTime,System.DateTime)">
      <summary>
            Compares two dates for equality down to the year (hours, minutes, seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsEqualDownToHour(System.DateTime,System.DateTime)">
      <summary>
            Compares two dates for equality down to the hour (minutes, seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsEqualDownToMinute(System.DateTime,System.DateTime)">
      <summary>
            Compares two dates for equality down to the minute (seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsEqualDownToMonth(System.DateTime,System.DateTime)">
      <summary>
            Compares two dates for equality down to the year (days, hours, minutes, seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsEqualDownToSecond(System.DateTime,System.DateTime)">
      <summary>
            Compares two dates for equality down to the second (milliseconds are ignored)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsEqualDownToWeek(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Compares two dates for equality down to the week (hours, minutes, seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <param name="cultureInfo">The CulturInfo to use for week calculation, can be null for current culture</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsEqualDownToYear(System.DateTime,System.DateTime)">
      <summary>
            Compares two dates for equality down to the year (months, days, hours, minutes, seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are equal down to the year</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsMidday(System.DateTime)">
      <summary>
            Tests if the time in the given DateTime object is midday (12h)
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>True if time is 12h ignoring minutes and seconds</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsMidnight(System.DateTime)">
      <summary>
            Tests if the time in the given DateTime object is midnight (0h)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <returns>True if time is 0h ignoring minures and seconds</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsMorning(System.DateTime)">
      <summary>
            Tests if the time in the given DateTime object is midday (12:00:00.000)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <returns>True if time is 00:00:00.000</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsNight(System.DateTime)">
      <summary>
            Tests if the time in the given DateTime object is between 18:00:00 and 06:00:00
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>True if time is between 18:00:00.000 and 06:00:00.000</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsPublicHoliday(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Checks if the given date falls on a Saturday or Sunday
            </summary>
      <param name="me">The DateTime object to check</param>
      <param name="cultureInfo">The CulturInfo to use for calendar calculation, can be null for current culture</param>
      <returns>True if the given date is Saturday or Sunday</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsSameDay(System.DateTime,System.DateTime)">
      <summary>
            Verifies if the two dates are at the same year
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are on the same year</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsSameHour(System.DateTime,System.DateTime)">
      <summary>
            Verifies if the two dates are at the same hour
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are on the same hour</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsSameMinute(System.DateTime,System.DateTime)">
      <summary>
            Verifies if the two dates are at the same minute
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are on the same minute</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsSameMonth(System.DateTime,System.DateTime)">
      <summary>
            Verifies if the two dates are at the same year
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are on the same year</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsSameSecond(System.DateTime,System.DateTime)">
      <summary>
            Verifies if the two dates are at the same second
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are on the same second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsSameWeek(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Verifies if the two dates are at the same week
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>True if the dates are on the same week</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsSameYear(System.DateTime,System.DateTime)">
      <summary>
            Verifies if the two dates are at the same year
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="other">The DateTime argument to compare with</param>
      <returns>True if the dates are on the same year</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
      <summary>
            Checks if the given date falls on a Saturday or Sunday
            </summary>
      <param name="me">The DateTime object to check</param>
      <returns>True if the given date is Saturday or Sunday</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsWithin(System.DateTime,MoreDateTime.DateOnlyRange)">
      <summary>
            Checks if the given value is between the given start and end values, including start date and end date
            </summary>
      <param name="me">The DateTime to compare</param>
      <param name="range">The date range to check</param>
      <returns>True if the value is greater or equal range.Start and less than or equal range.End</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsWithin(System.DateTime,MoreDateTime.DateTimeRange)">
      <summary>
            Checks if the given value is between the given start and end values, including start date and end date
            </summary>
      <param name="me">The DateTime to compare</param>
      <param name="range">The date range to check</param>
      <returns>True if the value is greater or equal range.Start and less than or equal range.End</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsWithin(System.DateTime,System.DateOnly,System.DateOnly)">
      <summary>
            Checks if the given value is between the given startDate and endDate values, including startDate and endDate
            </summary>
      <param name="me">The DateTime to compare</param>
      <param name="startDate">The startDate date</param>
      <param name="endDate">The endDate date</param>
      <returns>True if the value is greater or equal startDate and less than or equal endDate</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsWithin(System.DateTime,System.DateTime,System.DateTime)">
      <summary>
            Checks if the given value is between the given startDate and endDate values, including startDate and endDate
            </summary>
      <param name="me">The DateTime to compare</param>
      <param name="startDate">The startDate date</param>
      <param name="endDate">The endDate date</param>
      <returns>True if the value is greater or equal startDate and less than or equal endDate</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.IsWithin(System.Int32,System.Int32,System.Int32)">
      <summary>
            Checks if the given value is withn the given start and end values, inluding start and end
            </summary>
      <param name="me">The integer to compare</param>
      <param name="start">The start</param>
      <param name="end">The end</param>
      <returns>True if the value is greater or equal start and less than or equal end</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.LastFridayOfMonth(System.DateTime)">
      <summary>
            Returns the last Friday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the last Friday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.LastMondayOfMonth(System.DateTime)">
      <summary>
            Returns the last Monday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the last monday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.LastSaturdayOfMonth(System.DateTime)">
      <summary>
            Returns the last Saturday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the last Saturday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.LastSundayOfMonth(System.DateTime)">
      <summary>
            Returns the last Sunday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the last Sunday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.LastThursdayOfMonth(System.DateTime)">
      <summary>
            Returns the last Thursday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the last Thursday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.LastTuesdayOfMonth(System.DateTime)">
      <summary>
            Returns the last Tuesday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the last Tuesday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.LastWednesdayOfMonth(System.DateTime)">
      <summary>
            Returns the last Wednesday of the month
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the last Wednesday in this month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.LastWeekdayOfMonth(System.DateTime,System.DayOfWeek)">
      <summary>
            Returns the last given weekday of the year
            </summary>
      <param name="me">The <see cref="T:System.DateOnly" /> object</param>
      <param name="dayOfweek">The <see cref="T:System.DayOfWeek" /> to find</param>
      <returns>A <see cref="T:System.DateTime" /> object representing the last given weekday in this year</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextDay(System.DateTime)">
      <summary>
            Gets the DateTime value of the next day
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextFullDay(System.DateTime)">
      <summary>
            Gets the DateTime value of the next full day (01/01/2010 10:15 to 02/01/2010 00:00, 01/01/2010 10:45 to 02/01/2010 00:00, etc)
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextFullHour(System.DateTime)">
      <summary>
            Gets the DateTime value of the next full hour (10:15 to 11:00, 10:45 to 11:00, etc)
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextFullMinute(System.DateTime)">
      <summary>
            Gets the DateTime value of the next full minute (10:15:20 to 10:16:00)
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextFullSecond(System.DateTime)">
      <summary>
            Gets the DateTime value of the next full second (10:15:20.350 to 10:15:21.000)
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextHoliday(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Gets the DateTime value of the next public holiday according to the given CultureInfo.Calendar<br />
            If you have a license for the Nager nuget package, this method will calculate the working days based on the calendar in cultureInfo,
             or if you set a custom holiday provider, it will use that. Otherwise the default implementation will return DateTime.MaxValue
            </summary>
      <param name="dt">The DateTime object</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextHour(System.DateTime)">
      <summary>
            Gets the DateTime value of the next hour
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextMillisecond(System.DateTime)">
      <summary>
            Gets the DateTime value of the next millisecond
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextMinute(System.DateTime)">
      <summary>
            Gets the DateTime value of the next minute
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextMonth(System.DateTime)">
      <summary>
            Gets the DateTime value of the next month
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object whose value is the same day the next month of the given. If the month has less days then the day may change (e.g. 31 Jan to 28 Feb)</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextSecond(System.DateTime)">
      <summary>
            Gets the DateTime value of the next second
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextWeek(System.DateTime)">
      <summary>
            Gets the DateTime value of the same (week)day next week
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextWeekend(System.DateTime)">
      <summary>
            Gets the DateTime value of the next weekend following this date. If the given date is already a weekend, the next weekend is returned. 
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object representing the next weekend (always Saturday)</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextWorkday(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Gets the DateTime value of the next working day according to the given CultureInfo.Calendar<br />
            If you have a license for the Nager nuget package, this method will calculate the working days based on the calendar in cultureInfo,
            otherwise it will simply skip weekends, or if you set a custom holiday provider, it will use that.
            </summary>
      <param name="dt">The DateTime object</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NextYear(System.DateTime)">
      <summary>
            Gets the DateTime value of the next year
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfDaysUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Days between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Days between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfDecadesUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Decades between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Decades between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfHolidaysUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Holidays between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdayss and holidays, can be null to use current</param>
      <returns>The number of Holidays between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfHoursUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Hours between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdayss and holidays, can be null to use current</param>
      <returns>The number of Hours between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfMillisecondsUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Milliseconds between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdayss and holidays, can be null to use current</param>
      <returns>The number of Milliseconds between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfMinutesUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Minutes between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdayss and holidays, can be null to use current</param>
      <returns>The number of Minutes between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfMonthsUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Months between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Months between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfSecondsUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Seconds between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdayss and holidays, can be null to use current</param>
      <returns>The number of Seconds between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfSemestersUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Semesters between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Semesters between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfTrimestersUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Trimesters between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Semesters between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfWeekendsUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Weekends between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Weekends between startDate and endDate as a double without fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfWeeksUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Weeks between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of Weeks between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfWorkdaysUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of Workdays between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workWorkdays and holiWorkdays, can be null to use current</param>
      <returns>The number of Workdays between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.NumberOfYearsUntil(System.DateTime,System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Count the number of years between startDate and endDate
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="cultureInfo">The culture info for workdays and holidays, can be null to use current</param>
      <returns>The number of years between startDate and endDate as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.PreviousDay(System.DateTime)">
      <summary>
            Gets the DateTime value of the year before
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.PreviousHoliday(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Gets the DateTime value of the previous holiday<br />
            If you have a license for the Nager nuget package, this method will calculate the holidays based on the calendar in cultureInfo,
            otherwise it will simply skip weekends, or if you set a custom holiday provider, it will use that.
            </summary>
      <param name="dt">The DateTime object</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.PreviousHour(System.DateTime)">
      <summary>
            Gets the DateTime value of the previous hour
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.PreviousMillisecond(System.DateTime)">
      <summary>
            Gets the DateTime value of the previous millisecond
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.PreviousMinute(System.DateTime)">
      <summary>
            Gets the DateTime value of the previous minute
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.PreviousMonth(System.DateTime)">
      <summary>
            Gets the DateTime value of the month before
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object whose value is the same day the month before the given. If the month has less days then the day may change (e.g. 31 March to 28 Feb)</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.PreviousSecond(System.DateTime)">
      <summary>
            Gets the DateTime value of the previous second
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.PreviousWeek(System.DateTime)">
      <summary>
            Gets the DateOnly value of the same day the week before
            </summary>
      <param name="dt">The DateOnly object</param>
      <returns>A DateOnly object whose value is the week before the given, the weekday and time is not changed</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.PreviousWeekend(System.DateTime)">
      <summary>
            Gets the DateTime value of the weekend before this date. If the given date is already a weekend, the previous weekend is returned.
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object representing the previous weekend (always Sunday)</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.PreviousWorkday(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Gets the DateTime value of the previous working day according to the given CultureInfo.Calendar<br />
            If you have a license for the Nager nuget package, this method will calculate the working days based on the calendar in cultureInfo,
            otherwise it will simply skip weekends, or if you set a custom holiday provider, it will use that.
            </summary>
      <param name="dt">The DateTime object</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.PreviousYear(System.DateTime)">
      <summary>
            Gets the DateTime value of the previous year
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.SetHolidayProvider(MoreDateTime.Interfaces.IHolidayProvider)">
      <summary>
            Sets the holiday provider, when not set the default provider is used
            </summary>
      <param name="holidayProvider">The holiday provider, when null the default provider is used</param>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.Split(MoreDateTime.DateTimeRange,System.Int32)">
      <summary>
            Splits the given range of DateTime into the given number of parts.
            </summary>
      <param name="dates">The start and end date</param>
      <param name="parts">The number of parts to split into</param>
      <returns>A list of DateTimeRanges</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.Split(System.DateTime,System.DateTime,System.Int32)">
      <summary>
            Splits the given range of DateTime into the given number of parts.
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="parts">The number of parts to split into</param>
      <returns>A list of DateTimeRanges</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.Split(System.DateTime,System.TimeSpan,System.Int32)">
      <summary>
            Splits the given range of DateTime into the given number of parts.
            </summary>
      <param name="startDate">The start date</param>
      <param name="distance">The timespan to split</param>
      <param name="parts">The number of parts to split into</param>
      <returns>A list of DateTimeRanges</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.StartOfMonth(System.DateTime)">
      <summary>
            Returns a DateTime object representing the first year of the current year
            </summary>
      <param name="dateTime">The DateTime value of which the first year is requested</param>
      <returns>A DateTime object with year 1, time members set to 0 (00:00:00)</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.StartOfWeek(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Returns a DateTime object representing the first weekday of the given Week
            </summary>
      <param name="me">The DateTime value of which the first day is requested</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>A DateTime object with first day of the week</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.Sub(System.DateTime,System.TimeSpan)">
      <summary>
            Returns a new DateTime that subtracts the value of the specified TimeSpan from the value of this instance
            </summary>
      <param name="me">The DateTime object to subtract the value from</param>
      <param name="timeSpan">A positive time interval</param>
      <returns>An object whose value is the sum of the date and time represented by this instance minus the time interval represented by value</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.ToSqlString(System.DateTime)">
      <summary>
            Converts a DateTime value to an SQL appropriate format (yyyy-MM-ddThh:mm:ss.ffffff+00:00), independent of the current locale
            </summary>
      <param name="me">The DateTime value to convert</param>
      <returns>A DateTime string in SQL format </returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.TruncateTo(System.DateTime,MoreDateTime.Extensions.DateTimeExtensions.DateTruncate,System.Globalization.CultureInfo)">
      <summary>
            Truncates the precision of a DateTime object to the given precision
            </summary>
      <param name="dt">The DateTime object</param>
      <param name="TruncateTo">The precision to truncate to</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>The Truncated dateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.TruncateToDay(System.DateTime)">
      <summary>
            Truncates the precision of a DateTime object to the year
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>The Truncated dateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.TruncateToHour(System.DateTime)">
      <summary>
            Truncates the precision of a DateTime object to the hour
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>The Truncated dateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.TruncateToMinute(System.DateTime)">
      <summary>
            Truncates the precision of a DateTime object to the minute
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>The Truncated dateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.TruncateToMonth(System.DateTime)">
      <summary>
            Truncates the precision of a DateTime object to the year, year 1
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>The Truncated dateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.TruncateToSecond(System.DateTime)">
      <summary>
            Truncates the precision of a DateTime object to the second
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>The Truncated dateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.TruncateToWeek(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Truncates the precision of a DateTime object to the week of the object, year is first year of week
            </summary>
      <param name="dt">The DateTime object</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null to use current culture</param>
      <returns>The Truncated dateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.TruncateToYear(System.DateTime)">
      <summary>
            Truncates the precision of a DateTime object to the year, year 1, year 1
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>The Truncated dateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.Union(MoreDateTime.DateTimeRange,MoreDateTime.DateTimeRange)">
      <summary>
            Calculates the union of two DateTimeRanges. If the two ranges do not overlap, the result is 
            an empty DateTimeRange. Otherwise, the result is the DateTimeRange that contains both ranges.
            </summary>
      <param name="a">The first range</param>
      <param name="b">The second range</param>
      <returns>A DateTimeRange which is either empty, when there is no overlap, or contains the range spanning both ranges</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.Weeknumber(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Tests if the time in the given DateTime object is midday (12:00:00.000)
            </summary>
      <param name="dt">The first DateTime argument</param>
      <param name="cultureInfo">The CultureInfo to use for week calculation, can be null for current culture</param>
      <returns>True if time is 00:00:00.000</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.DateTimeExtensions.WeekOfYear(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Returns the Week of the Year of this <see cref="T:System.DateTime" /> object
            </summary>
      <param name="me">The DateTime object</param>
      <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo" /> for the calendar, if null (or not provided) the current culture is used</param>
      <returns>An integer </returns>
    </member>
    <member name="T:MoreDateTime.Extensions.DateTimeExtensions.DateTruncate">
      <summary>
            Precision specification for the {DateTime.}TruncateTo method
            </summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.DateTruncate.Year">
      <summary>Precision Year, all below is set to 0</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.DateTruncate.Month">
      <summary>Precision Month, all below is set to 0</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.DateTruncate.Week">
      <summary>Precision Week, all below is set to 0</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.DateTruncate.Day">
      <summary>Precision Day, all below is set to 0</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.DateTruncate.Hour">
      <summary>Precision Hour, all below is set to 0</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.DateTruncate.Minute">
      <summary>Precision Minute, all below is set to 0</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.DateTruncate.Second">
      <summary>Precision Second, all below is set to 0</summary>
    </member>
    <member name="T:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit">
      <summary>
            Units of time
            </summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Years">
      <summary>Count years</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Decades">
      <summary>Count decades</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Semesters">
      <summary>Count semesters</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Trimesters">
      <summary>Count semesters</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Months">
      <summary>Count months</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Weeks">
      <summary>Count Weeks</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Weekends">
      <summary>Count Weekends</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Days">
      <summary>Count days</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Workdays">
      <summary>Count workdays</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Hours">
      <summary>Count hours</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Minutes">
      <summary>Count minutes</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Seconds">
      <summary>Count seconds</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Milliseconds">
      <summary>Count milliseconds</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.DateTimeExtensions.TimeUnit.Holidays">
      <summary>Count milliseconds</summary>
    </member>
    <member name="T:MoreDateTime.Extensions.TimeOnlyExtensions">
      <summary>
            The extension methods for working with <see cref="T:System.TimeOnly" /> objects.
            </summary>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.AddMilliseconds(System.TimeOnly,System.Int32)">
      <summary>
            Adds the given number of milliseconds to the given TimeOnly object
            </summary>
      <param name="dt">The TimeOnly object</param>
      <param name="milliseconds">The number of milliseconds to add</param>
      <returns>An <see cref="T:System.TimeOnly" /> whose value is the sum of the time represented by this instance and the time interval represented by value</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.AddSeconds(System.TimeOnly,System.Int32)">
      <summary>
            Adds the given number of seconds to the given TimeOnly object
            </summary>
      <param name="dt">The TimeOnly object</param>
      <param name="seconds">The number of seconds to add</param>
      <returns>An <see cref="T:System.TimeOnly" /> whose value is the sum of the time represented by this instance and the time interval represented by value</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.AddTicks(System.TimeOnly,System.Int64)">
      <summary>
            Adds the given number of ticks to the given TimeOnly object
            </summary>
      <param name="dt">The TimeOnly object</param>
      <param name="ticks">The number of ticks to add</param>
      <returns>An <see cref="T:System.TimeOnly" /> whose value is the sum of the time represented by this instance and the time interval represented by value</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.Difference(MoreDateTime.TimeOnlyRange,MoreDateTime.TimeOnlyRange)">
      <summary>
            Calculates the difference of two TimeOnlyRanges. If the two ranges do not overlap, the result is 
            the first TimeOnlyRange. Otherwise, the result is the first TimeOnlyRange without where both ranges overlap.
            </summary>
      <param name="a">The first range</param>
      <param name="b">The second range</param>
      <returns>A list of TimeOnlyRange</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.Distance(System.TimeOnly,System.TimeOnly)">
      <summary>
            Returns the distance as a TimeSpan between two TimeOnly objects. The result is always positive.
            </summary>
      <param name="startTime">The start time object</param>
      <param name="endTime">The end time object</param>
      <returns>A TimeSpan which expresses the difference between the two times</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.DoesOverlap(MoreDateTime.TimeOnlyRange,MoreDateTime.TimeOnlyRange)">
      <summary>
            Verifies if TimeOnlyRange a overlapps with TimeOnlyRange b.
            </summary>
      <param name="a">The TimeOnlyRange to verify a possible overlap</param>
      <param name="b">The TimeOnlyrange to verify with</param>
      <returns>A bool.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.EnumerateInStepsUntil(System.TimeOnly,System.TimeOnly,System.TimeSpan)">
      <summary>
            Enumerates starting with the startTime date, until the endTime date in steps of distance<br />
            When the distance is negative, the start date must be greater than the end date, and the enumeration goes backwards
            </summary>
      <param name="startTime">The starting TimeOnly object</param>
      <param name="endTime">The ending TimeOnly object</param>
      <param name="distance">The distance expressed as TimeSpan</param>
      <returns>An IEnumerable of type TimeOnly</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.EnumerateInStepsUntil(System.TimeOnly,System.TimeOnly,System.TimeSpan,System.Func{System.TimeOnly,System.Boolean})">
      <summary>
            Enumerates starting with startTime until endTime in steps of distance
            </summary>
      <param name="startTime">The starting TimeOnly object</param>
      <param name="endTime">The ending TimeOnly object</param>
      <param name="distance">The distance expressed as TimeSpan</param>
      <param name="evaluator">An evaluation function called for each moment before returning it. If the evaluator returns false, the value is skipped</param>
      <returns>An IEnumerable of type TimeOnly</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.Intersection(MoreDateTime.TimeOnlyRange,MoreDateTime.TimeOnlyRange)">
      <summary>
            Calculates the intersection of two TimeOnlyRanges. If the two ranges do not overlap, the result is 
            an empty TimeOnlyRange. Otherwise, the result is the TimeOnlyRange that where both ranges overlap.
            </summary>
      <param name="a">The first range</param>
      <param name="b">The second range</param>
      <returns>A TimeOnlyRange which is either empty, when there is no overlap, or contains the range where both ranges overlap</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsAfternoon(System.TimeOnly)">
      <summary>
            Tests if the time in the given TimeOnly object is considered afternoon (12:00:00.000 - 18:00:00.000)
            </summary>
      <param name="to">The first TimeOnly argument</param>
      <returns>True if time is between 12:00:00.000 and 18:00:00.000</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsBetween(System.DateTime,System.TimeOnly,System.TimeOnly)">
      <summary>
            Checks if the given value is between the given startTime and endTime values, not including start or end time
            </summary>
      <param name="me">The TimeOnly to compare</param>
      <param name="startTime">The start time</param>
      <param name="endTime">The end time</param>
      <returns>True if the value is greater or equal startTime and less than or equal endTime</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsEqual(System.TimeOnly,System.TimeOnly,MoreDateTime.Extensions.DateTimeExtensions.DateTruncate,System.Globalization.CultureInfo)">
      <summary>
            Compares two dates for equality down to the given precision
            </summary>
      <param name="dt">The first TimeOnly argument</param>
      <param name="other">The TimeOnly argument to compare with</param>
      <param name="truncateTo">The precision to truncate to</param>
      <param name="cultureInfo">The CulturInfo to use for calendar calculation, can be null for current culture</param>
      <returns>A bool.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsEqualDownToHour(System.TimeOnly,System.TimeOnly)">
      <summary>
            Compares two dates for equality down to the hour (minutes, seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first TimeOnly argument</param>
      <param name="other">The TimeOnly argument to compare with</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsEqualDownToMinute(System.TimeOnly,System.TimeOnly)">
      <summary>
            Compares two dates for equality down to the minute (seconds and milliseconds are ignored)
            </summary>
      <param name="dt">The first TimeOnly argument</param>
      <param name="other">The TimeOnly argument to compare with</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsEqualDownToSecond(System.TimeOnly,System.TimeOnly)">
      <summary>
            Compares two dates for equality down to the second (milliseconds are ignored)
            </summary>
      <param name="dt">The first TimeOnly argument</param>
      <param name="other">The TimeOnly argument to compare with</param>
      <returns>True if the dates are equal down to the second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsFullHour(System.TimeOnly,System.Boolean)">
      <summary>
            Tests if the time in the given TimeOnly object is midnight (0h)
            </summary>
      <param name="to">The first TimeOnly argument</param>
      <param name="ignoreMilliseconds">Determines if the milliseconds will be taken into account or not</param>
      <returns>True if time is 0h ignoring minures and seconds</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsFullMinute(System.TimeOnly,System.Boolean)">
      <summary>
            Tests if the time in the given TimeOnly object is midnight (0h)
            </summary>
      <param name="to">The first TimeOnly argument</param>
      <param name="ignoreMilliseconds">Determines if the milliseconds will be taken into account or not</param>
      <returns>True if time is 0h ignoring minures and seconds</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsMidday(System.TimeOnly)">
      <summary>
            Tests if the time in the given TimeOnly object is midday (12h)
            </summary>
      <param name="to">The TimeOnly object</param>
      <returns>True if time is 12h ignoring minutes and seconds</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsMidnight(System.TimeOnly)">
      <summary>
            Tests if the time in the given TimeOnly object is midnight (0h)
            </summary>
      <param name="to">The first TimeOnly argument</param>
      <returns>True if time is 0h ignoring minures and seconds</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsMorning(System.TimeOnly)">
      <summary>
            Tests if the time in the given TimeOnly object is midday (12:00:00.000)
            </summary>
      <param name="to">The first TimeOnly argument</param>
      <returns>True if time is 00:00:00.000</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsNight(System.TimeOnly)">
      <summary>
            Tests if the time in the given TimeOnly object is between 18:00:00 and 06:00:00
            </summary>
      <param name="to">The TimeOnly object</param>
      <returns>True if time is between 18:00:00.000 and 06:00:00.000</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsSameHour(System.TimeOnly,System.TimeOnly)">
      <summary>
            Verifies if the two instances are the same hour
            </summary>
      <param name="dt">The first TimeOnly argument</param>
      <param name="other">The TimeOnly argument to compare with</param>
      <returns>True if the dates are on the same hour</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsSameMillisecond(System.TimeOnly,System.TimeOnly)">
      <summary>
            Verifies if the two dates are the same millisecond
            </summary>
      <param name="dt">The first TimeOnly argument</param>
      <param name="other">The TimeOnly argument to compare with</param>
      <returns>True if the dates are on the same month</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsSameMinute(System.TimeOnly,System.TimeOnly)">
      <summary>
            Verifies if the two dates are the same minute
            </summary>
      <param name="dt">The first TimeOnly argument</param>
      <param name="other">The TimeOnly argument to compare with</param>
      <returns>True if the dates are on the same minute</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsSameSecond(System.TimeOnly,System.TimeOnly)">
      <summary>
            Verifies if the two instances are the same second
            </summary>
      <param name="dt">The first TimeOnly argument</param>
      <param name="other">The TimeOnly argument to compare with</param>
      <returns>True if the dates are on the same second</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsWithin(System.DateTime,System.TimeOnly,System.TimeOnly)">
      <summary>
            Checks if the given value is between the given startTime and endTime values, including start or end time
            </summary>
      <param name="me">The TimeOnly to compare</param>
      <param name="startTime">The start time</param>
      <param name="endTime">The end time</param>
      <returns>True if the value is greater or equal startTime and less than or equal endTime</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsWithin(System.TimeOnly,MoreDateTime.TimeOnlyRange)">
      <summary>
            Checks if the given value is between the given start and end values, including start date and end date
            </summary>
      <param name="me">The DateTime to compare</param>
      <param name="range">The date range to check</param>
      <returns>True if the value is greater or equal range.Start and less than or equal range.End</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.IsWithin(System.TimeOnly,System.TimeOnly,System.TimeOnly)">
      <summary>
            Checks if the given value is between the given startTime and endTime values, including start or end time
            </summary>
      <param name="me">The TimeOnly to compare</param>
      <param name="startTime">The start time</param>
      <param name="endTime">The end time</param>
      <returns>True if the value is greater or equal startTime and less than or equal endTime</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.NextFullHour(System.TimeOnly)">
      <summary>
            Gets the DateTime value of the next full hour (10:15 to 11:00, 10:45 to 11:00, etc)
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.NextFullMinute(System.TimeOnly)">
      <summary>
            Gets the DateTime value of the next full minute (10:15:20 to 10:16:00)
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.NextFullSecond(System.TimeOnly)">
      <summary>
            Gets the DateTime value of the next full second (10:15:20.350 to 10:15:21.000)
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>A DateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.NextHour(System.TimeOnly)">
      <summary>
            Gets the TimeOnly value of the next day
            </summary>
      <param name="dt">The TimeOnly object</param>
      <returns>A TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.NextMillisecond(System.TimeOnly)">
      <summary>
            Gets the TimeOnly value of the next millisecond
            </summary>
      <param name="dt">The TimeOnly object</param>
      <returns>A TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.NextMinute(System.TimeOnly)">
      <summary>
            Gets the TimeOnly value of the next day
            </summary>
      <param name="dt">The TimeOnly object</param>
      <returns>A TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.NextSecond(System.TimeOnly)">
      <summary>
            Gets the TimeOnly value of the next second
            </summary>
      <param name="dt">The TimeOnly object</param>
      <returns>A TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.NumberOfHoursUntil(System.TimeOnly,System.TimeOnly)">
      <summary>
            Count the number of Hours between startTime and endTime
            </summary>
      <param name="startTime">The start time</param>
      <param name="endTime">The end time</param>
      <returns>The number of Hours between startTime and endTime as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.NumberOfMillisecondsUntil(System.TimeOnly,System.TimeOnly)">
      <summary>
            Count the number of Milliseconds between startTime and endTime
            </summary>
      <param name="startTime">The start time</param>
      <param name="endTime">The end time</param>
      <returns>The number of Milliseconds between startTime and endTime as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.NumberOfMinutesUntil(System.TimeOnly,System.TimeOnly)">
      <summary>
            Count the number of Minutes between startTime and endTime
            </summary>
      <param name="startTime">The start time</param>
      <param name="endTime">The end time</param>
      <returns>The number of Minutes between startTime and endTime as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.NumberOfSecondsUntil(System.TimeOnly,System.TimeOnly)">
      <summary>
            Count the number of Seconds between startTime and endTime
            </summary>
      <param name="startTime">The start time</param>
      <param name="endTime">The end time</param>
      <returns>The number of Seconds between startTime and endTime as a double with fractions</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.PreviousHour(System.TimeOnly)">
      <summary>
            Gets the TimeOnly value of the Previous day
            </summary>
      <param name="dt">The TimeOnly object</param>
      <returns>A TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.PreviousMillisecond(System.TimeOnly)">
      <summary>
            Gets the TimeOnly value of the Previous day
            </summary>
      <param name="dt">The TimeOnly object</param>
      <returns>A TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.PreviousMinute(System.TimeOnly)">
      <summary>
            Gets the TimeOnly value of the Previous day
            </summary>
      <param name="dt">The TimeOnly object</param>
      <returns>A TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.PreviousSecond(System.TimeOnly)">
      <summary>
            Gets the TimeOnly value of the Previous day
            </summary>
      <param name="dt">The TimeOnly object</param>
      <returns>A TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.Split(MoreDateTime.TimeOnlyRange,System.Int32)">
      <summary>
            Splits the given range of TimeOnly into the given number of parts.
            </summary>
      <param name="times">The start and end date</param>
      <param name="parts">The number of parts to split into</param>
      <returns>A list of TimeOnlyRanges</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.Split(System.TimeOnly,System.TimeOnly,System.Int32)">
      <summary>
            Splits the given range of TimeOnly into the given number of parts.
            </summary>
      <param name="startDate">The start date</param>
      <param name="endDate">The end date</param>
      <param name="parts">The number of parts to split into</param>
      <returns>A list of TimeOnlyRanges</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.Split(System.TimeOnly,System.TimeSpan,System.Int32)">
      <summary>
            Splits the given range of TimeOnly into the given number of parts.
            </summary>
      <param name="startDate">The start date</param>
      <param name="distance">The timespan to split</param>
      <param name="parts">The number of parts to split into</param>
      <returns>A list of TimeOnlyRanges</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.Sub(System.TimeOnly,System.TimeSpan)">
      <summary>
            Returns a new TimeOnly that subtracts the value of the specified TimeSpan from the value of this instance
            </summary>
      <param name="me">The TimeOnly object to subtract the value from</param>
      <param name="timeSpan">A positive time interval</param>
      <returns>An object whose value is the sum of the date and time represented by this instance minus the time interval represented by value</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.TruncateTo(System.TimeOnly,MoreDateTime.Extensions.DateTimeExtensions.DateTruncate)">
      <summary>
            Truncates the precision of a TimeOnly object to the given precision
            </summary>
      <param name="dt">The TimeOnly object</param>
      <param name="TruncateTo">The precision to truncate to</param>
      <returns>The Truncated TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.TruncateToHour(System.TimeOnly)">
      <summary>
            Truncates the precision of a TimeOnly object to the hour
            </summary>
      <param name="dt">The TimeOnly object</param>
      <returns>The Truncated TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.TruncateToMinute(System.TimeOnly)">
      <summary>
            Truncates the precision of a TimeOnly object to the minute
            </summary>
      <param name="dt">The TimeOnly object</param>
      <returns>The Truncated TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.TruncateToSecond(System.TimeOnly)">
      <summary>
            Truncates the precision of a TimeOnly object to the second
            </summary>
      <param name="dt">The TimeOnly object</param>
      <returns>The Truncated TimeOnly object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeOnlyExtensions.Union(MoreDateTime.TimeOnlyRange,MoreDateTime.TimeOnlyRange)">
      <summary>
            Calculates the union of two TimeOnlyRanges. If the two ranges do not overlap, the result is 
            an empty TimeOnlyRange. Otherwise, the result is the TimeOnlyRange that contains both ranges.
            </summary>
      <param name="a">The first range</param>
      <param name="b">The second range</param>
      <returns>A TimeOnlyRange which is either empty, when there is no overlap, or contains the range spanning both ranges</returns>
    </member>
    <member name="T:MoreDateTime.Extensions.TimeSpanExtensions">
      <summary>
            The extension methods for working with <see cref="T:System.TimeSpan" /> objects.
            </summary>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.IsNegative(System.TimeSpan)">
      <summary>
            Returns if the value is negative
            </summary>
      <param name="ts">The TimeSpan to test</param>
      <returns>A bool.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.IsPositive(System.TimeSpan)">
      <summary>
            Returns if the value is positive
            </summary>
      <param name="ts">The TimeSpan to test</param>
      <returns>A bool.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.RoundTo(System.TimeSpan,MoreDateTime.Extensions.TimeSpanExtensions.RoundingUnit)">
      <summary>
            Rounds the TimeSpan mathematically to the next unit of the given precision.
            </summary>
      <param name="timeSpan">The TimeSpan</param>
      <param name="roundingUnit">The truncatation enum</param>
      <returns>A TimeSpan.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.RoundToDay(System.TimeSpan)">
      <summary>
            Rounds the TimeSpan mathematically to the day
            </summary>
      <param name="timeSpan">The TimeSpan</param>
      <returns>A TimeSpan.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.RoundToHour(System.TimeSpan)">
      <summary>
            Rounds the TimeSpan mathematically to the Hour
            </summary>
      <param name="timeSpan">The TimeSpan</param>
      <returns>A TimeSpan.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.RoundToMinute(System.TimeSpan)">
      <summary>
            Rounds the TimeSpan mathematically to the Minute
            </summary>
      <param name="timeSpan">The TimeSpan</param>
      <returns>A TimeSpan.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.RoundToSecond(System.TimeSpan)">
      <summary>
            Rounds the TimeSpan mathematically to the Second
            </summary>
      <param name="timeSpan">The TimeSpan</param>
      <returns>A TimeSpan.</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.TruncateTo(System.TimeSpan,MoreDateTime.Extensions.TimeSpanExtensions.TimeSpanTruncate)">
      <summary>
            Truncates the precision of a TimeSpan object to the given precision
            </summary>
      <param name="dt">The TimeSpan object</param>
      <param name="TruncateTo">The precision to truncate to</param>
      <returns>The Truncated TimeSpan object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.TruncateToDay(System.TimeSpan)">
      <summary>
            Truncates the precision of a DateTime object to the year
            </summary>
      <param name="dt">The DateTime object</param>
      <returns>The Truncated dateTime object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.TruncateToHour(System.TimeSpan)">
      <summary>
            Truncates the precision of a TimeSpan object to the hour
            </summary>
      <param name="dt">The TimeSpan object</param>
      <returns>The Truncated TimeSpan object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.TruncateToMinute(System.TimeSpan)">
      <summary>
            Truncates the precision of a TimeSpan object to the minute
            </summary>
      <param name="dt">The TimeSpan object</param>
      <returns>The Truncated TimeSpan object</returns>
    </member>
    <member name="M:MoreDateTime.Extensions.TimeSpanExtensions.TruncateToSecond(System.TimeSpan)">
      <summary>
            Truncates the precision of a TimeSpan object to the second
            </summary>
      <param name="dt">The TimeSpan object</param>
      <returns>The Truncated TimeSpan object</returns>
    </member>
    <member name="T:MoreDateTime.Extensions.TimeSpanExtensions.RoundingUnit">
      <summary>
            The rounding unit for rounding TimeSpans
            </summary>
    </member>
    <member name="F:MoreDateTime.Extensions.TimeSpanExtensions.RoundingUnit.Day">
      <summary>Round to days</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.TimeSpanExtensions.RoundingUnit.Hour">
      <summary>Round to hour</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.TimeSpanExtensions.RoundingUnit.Minute">
      <summary>Round to minute</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.TimeSpanExtensions.RoundingUnit.Second">
      <summary>Round to second</summary>
    </member>
    <member name="T:MoreDateTime.Extensions.TimeSpanExtensions.TimeSpanTruncate">
      <summary>
            Precision specification for the {DateTime.}TruncateTo method
            </summary>
    </member>
    <member name="F:MoreDateTime.Extensions.TimeSpanExtensions.TimeSpanTruncate.Weeks">
      <summary>Precision Week, all below is set to 0</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.TimeSpanExtensions.TimeSpanTruncate.Days">
      <summary>Precision Day, all below is set to 0</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.TimeSpanExtensions.TimeSpanTruncate.Hours">
      <summary>Precision Hour, all below is set to 0</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.TimeSpanExtensions.TimeSpanTruncate.Minutes">
      <summary>Precision Minute, all below is set to 0</summary>
    </member>
    <member name="F:MoreDateTime.Extensions.TimeSpanExtensions.TimeSpanTruncate.Seconds">
      <summary>Precision Second, all below is set to 0</summary>
    </member>
    <member name="T:MoreDateTime.Interfaces.IDateTimeProvider">
      <summary>
            The interface for providing DateTime information
            </summary>
    </member>
    <member name="P:MoreDateTime.Interfaces.IDateTimeProvider.Now">
      <summary>
            Gets the current DateTime (or the mock value if set)
            </summary>
    </member>
    <member name="P:MoreDateTime.Interfaces.IDateTimeProvider.Today">
      <summary>
            Gets the date part of the current DateTime with the time set to 00:00:00 (or the mock value if set)
            </summary>
    </member>
    <member name="P:MoreDateTime.Interfaces.IDateTimeProvider.UtcNow">
      <summary>
            Gets the current UTC DateTime (or the mock value if set)
            </summary>
    </member>
    <member name="P:MoreDateTime.Interfaces.IDateTimeProvider.UtcToday">
      <summary>
            Gets the date part of the current UTC DateTime with the time set to 00:00:00 (or the mock value if set)
            </summary>
    </member>
    <member name="T:MoreDateTime.Interfaces.IHolidayProvider">
      <summary>
            An interface to provide access to holiday information
            </summary>
    </member>
    <member name="M:MoreDateTime.Interfaces.IHolidayProvider.IsPublicHoliday(System.DateOnly,System.Globalization.CultureInfo)">
      <summary>
            Checks whether the given date is a public holiday for the given Calendar in CultureInfo
            </summary>
      <param name="date">The date</param>
      <param name="cultureInfo">The culture info.</param>
      <returns>A bool.</returns>
    </member>
    <member name="M:MoreDateTime.Interfaces.IHolidayProvider.IsPublicHoliday(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Checks whether the given date is a public holiday for the given Calendar in CultureInfo
            </summary>
      <param name="date">The date</param>
      <param name="cultureInfo">The culture info.</param>
      <returns>A bool.</returns>
    </member>
    <member name="M:MoreDateTime.Interfaces.IHolidayProvider.NumberOfKnownHolidays(System.Int32,System.Globalization.CultureInfo)">
      <summary>
            Gets the number of known holidays
            </summary>
      <param name="year">The year for which the number of holidays is requested</param>
      <param name="cultureInfo">The </param>
    </member>
    <member name="T:MoreDateTime.Interfaces.RangeDirection">
      <summary>
            The range direction enum, indicates in which direction to move the ranges values
            </summary>
    </member>
    <member name="F:MoreDateTime.Interfaces.RangeDirection.Both">
      <summary>
            Move start and end
            </summary>
    </member>
    <member name="F:MoreDateTime.Interfaces.RangeDirection.Start">
      <summary>
            Move start only
            </summary>
    </member>
    <member name="F:MoreDateTime.Interfaces.RangeDirection.End">
      <summary>
            Move end only
            </summary>
    </member>
  </members>
</doc>